

###

import os
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from PIL import Image

def load_and_preprocess_images(folder_path, target_size=(64, 64)):
    images = []
    labels = []
    for filename in os.listdir(folder_path):
        if filename.endswith(« .jpg ») or filename.endswith(« .png »):
            img = Image.open(os.path.join(folder_path, filename)).convert(‘L’)  # Convert to grayscale
            img = img.resize(target_size)  # Resize to target size
            img_array = np.array(img).flatten()  # Flatten to 1D array
            images.append(img_array)
            # Assume skin tone label is in the filename (e.g., « skin_tone_0.75.jpg »)
            label = float(filename.split(« _ »)[-1].split(« . »)[0])
            labels.append(label)
    return np.array(images), np.array(labels)

def train_skin_tone_model(folder_path):
    X, y = load_and_preprocess_images(folder_path)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f »Mean Squared Error: {mean_squared_error(y_test, y_pred)} »)
    return model

# Example usage
skin_tone_folder = « skin_tone_images »
skin_tone_model = train_skin_tone_model(skin_tone_folder)

###

def train_windshield_shade_model(folder_path):
    X, y = load_and_preprocess_images(folder_path)
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model = RandomForestRegressor(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    print(f »Mean Squared Error: {mean_squared_error(y_test, y_pred)} »)
    return model

# Example usage
windshield_shade_folder = « windshield_shade_images »
windshield_shade_model = train_windshield_shade_model(windshield_shade_folder)

###

def predict_driver_skin_tone(grayscale_image, skin_tone_model, windshield_shade_model, target_size=(64, 64)):
    # Preprocess the grayscale image
    grayscale_image = grayscale_image.resize(target_size)
    grayscale_array = np.array(grayscale_image).flatten().reshape(1, -1)

    # Predict windshield shade
    windshield_shade = windshield_shade_model.predict(grayscale_array)[0]

    # Adjust for windshield shade (e.g., normalize skin tone prediction)
    adjusted_skin_tone = skin_tone_model.predict(grayscale_array)[0] - windshield_shade

    print(f »Predicted Driver Skin Tone: {adjusted_skin_tone} »)
    return adjusted_skin_tone

# Example usage
predicted_skin_tone = predict_driver_skin_tone(grayscale_image, skin_tone_model, windshield_shade_model)

###

